$date
	Fri Nov 26 16:11:07 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module FPALU_tb $end
$var wire 1 ! dout_uni_y_sgn $end
$var wire 22 " dout_uni_y_man_dn [21:0] $end
$var wire 6 # dout_uni_y_exp [5:0] $end
$var wire 1 $ din_uni_b_sgn $end
$var wire 22 % din_uni_b_man_dn [21:0] $end
$var wire 6 & din_uni_b_exp [5:0] $end
$var wire 1 ' din_uni_a_sgn $end
$var wire 22 ( din_uni_a_man_dn [21:0] $end
$var wire 6 ) din_uni_a_exp [5:0] $end
$var reg 32 * a [31:0] $end
$var reg 1 + add_muln $end
$var reg 32 , b [31:0] $end
$var reg 1 - clk $end
$var reg 1 . rst_n $end
$var real 1 / a_real $end
$var real 1 0 b_real $end
$var real 1 1 result $end
$scope module dut $end
$var wire 1 + add_muln $end
$var wire 1 - clk $end
$var wire 22 2 din_AL_mana [21:0] $end
$var wire 22 3 din_AL_manb [21:0] $end
$var wire 6 4 din_uni_a_exp [5:0] $end
$var wire 22 5 din_uni_a_man_dn [21:0] $end
$var wire 1 ' din_uni_a_sgn $end
$var wire 6 6 din_uni_b_exp [5:0] $end
$var wire 22 7 din_uni_b_man_dn [21:0] $end
$var wire 1 $ din_uni_b_sgn $end
$var wire 1 ! dout_uni_y_sgn $end
$var wire 1 . rst_n $end
$var wire 1 8 s1_addsubn $end
$var wire 1 9 s1_ea_gte_eb $end
$var wire 1 : s2_ea_lt_eb $end
$var wire 1 ; s2_lhs_is_zero $end
$var wire 1 < s5_ea_lt_eb $end
$var wire 6 = s5_expadj_skip [5:0] $end
$var wire 7 > s5_expadj_mul [6:0] $end
$var wire 7 ? s5_expadj_add [6:0] $end
$var wire 32 @ s5_bsl_out [31:0] $end
$var wire 32 A s4_lzdi [31:0] $end
$var wire 5 B s4_lzd [4:0] $end
$var wire 22 C s3_mulout1 [21:0] $end
$var wire 23 D s3_mmux_y [22:0] $end
$var wire 23 E s3_alu_out [22:0] $end
$var wire 1 F s2_s5 $end
$var wire 1 G s2_s2 $end
$var wire 2 H s2_opcode_mod [1:0] $end
$var wire 23 I s2_mmux3_rhs_addsub [22:0] $end
$var wire 23 J s2_mmux3_lhs_addsub [22:0] $end
$var wire 22 K s2_mmux2_rhs [21:0] $end
$var wire 22 L s2_mmux2_lhs [21:0] $end
$var wire 22 M s2_bsr_out_gated [21:0] $end
$var wire 32 N s2_bsr_out [31:0] $end
$var wire 22 O s1_mmux_rhs [21:0] $end
$var wire 22 P s1_mmux_lhs [21:0] $end
$var wire 1 Q s1_ml_eb_is_denorm $end
$var wire 1 R s1_ml_ea_is_denorm $end
$var wire 6 S s1_ea_sub_eb_abs [5:0] $end
$var wire 7 T s1_ea_sub_eb [6:0] $end
$var wire 1 U s1_ea_lt_eb $end
$var wire 14 V s1_br4enc_input [13:0] $end
$var wire 18 W s1_br4enc [17:0] $end
$var wire 6 X s1_br4_s [5:0] $end
$var wire 72 Y s1_br4_pp [71:0] $end
$var wire 12 Z pp5 [11:0] $end
$var wire 12 [ pp4 [11:0] $end
$var wire 12 \ pp3 [11:0] $end
$var wire 12 ] pp2 [11:0] $end
$var wire 12 ^ pp1 [11:0] $end
$var wire 12 _ pp0 [11:0] $end
$var wire 22 ` dout_uni_y_man_dn [21:0] $end
$var wire 6 a dout_uni_y_exp [5:0] $end
$var wire 11 b din_ML_manb [10:0] $end
$var wire 11 c din_ML_mana [10:0] $end
$var wire 5 d din_ML_expb [4:0] $end
$var wire 5 e din_ML_expa [4:0] $end
$var reg 2 f s1_opcode [1:0] $end
$var reg 1 g s2_addsubn_r $end
$var reg 72 h s2_br4_pp_r [71:0] $end
$var reg 6 i s2_br4_s_r [5:0] $end
$var reg 1 j s2_ea_gte_eb_r $end
$var reg 6 k s2_ea_r [5:0] $end
$var reg 6 l s2_ea_sub_eb_abs_r [5:0] $end
$var reg 6 m s2_eb_r [5:0] $end
$var reg 6 n s2_expa_r [5:0] $end
$var reg 22 o s2_expb_r [21:0] $end
$var reg 22 p s2_mmux_lhs_r [21:0] $end
$var reg 22 q s2_mmux_rhs_r [21:0] $end
$var reg 2 r s2_opcode_r [1:0] $end
$var reg 17 s s2_ps0 [16:0] $end
$var reg 17 t s2_ps1 [16:0] $end
$var reg 1 u s3_addsubn_r $end
$var reg 1 v s3_alumux_cin $end
$var reg 23 w s3_alumux_lhs [22:0] $end
$var reg 23 x s3_alumux_rhs [22:0] $end
$var reg 1 y s3_ea_gte_eb_r $end
$var reg 6 z s3_ea_r [5:0] $end
$var reg 6 { s3_eb_r [5:0] $end
$var reg 6 | s3_expa_r [5:0] $end
$var reg 22 } s3_expb_r [21:0] $end
$var reg 23 ~ s3_lhs_r [22:0] $end
$var reg 2 !" s3_opcode_r [1:0] $end
$var reg 17 "" s3_ps0_r [16:0] $end
$var reg 17 #" s3_ps1_r [16:0] $end
$var reg 23 $" s3_rhs_r [22:0] $end
$var reg 1 %" s3_s2_r $end
$var reg 1 &" s3_s5_r $end
$var reg 1 '" s4_ea_gte_eb_r $end
$var reg 6 (" s4_ea_r [5:0] $end
$var reg 22 )" s4_eb_r [21:0] $end
$var reg 23 *" s4_many_r [22:0] $end
$var reg 2 +" s4_opcode_r [1:0] $end
$var reg 1 ," s5_ea_gte_eb_r $end
$var reg 6 -" s5_ea_r [5:0] $end
$var reg 6 ." s5_eb_r [5:0] $end
$var reg 7 /" s5_expadj_final [6:0] $end
$var reg 5 0" s5_lzd_r [4:0] $end
$var reg 23 1" s5_many_r [22:0] $end
$var reg 2 2" s5_opcode_r [1:0] $end
$var reg 5 3" s5_shiftbias [4:0] $end
$scope begin gen_br4enc[0] $end
$scope module s1_u_br4enc $end
$var wire 3 4" bin [2:0] $end
$var reg 3 5" br4_out [2:0] $end
$upscope $end
$scope module s1_u_br4ppgen $end
$var wire 11 6" a [10:0] $end
$var wire 3 7" br4 [2:0] $end
$var wire 1 8" s $end
$var reg 12 9" o [11:0] $end
$upscope $end
$upscope $end
$scope begin gen_br4enc[1] $end
$scope module s1_u_br4enc $end
$var wire 3 :" bin [2:0] $end
$var reg 3 ;" br4_out [2:0] $end
$upscope $end
$scope module s1_u_br4ppgen $end
$var wire 11 <" a [10:0] $end
$var wire 3 =" br4 [2:0] $end
$var wire 1 >" s $end
$var reg 12 ?" o [11:0] $end
$upscope $end
$upscope $end
$scope begin gen_br4enc[2] $end
$scope module s1_u_br4enc $end
$var wire 3 @" bin [2:0] $end
$var reg 3 A" br4_out [2:0] $end
$upscope $end
$scope module s1_u_br4ppgen $end
$var wire 11 B" a [10:0] $end
$var wire 3 C" br4 [2:0] $end
$var wire 1 D" s $end
$var reg 12 E" o [11:0] $end
$upscope $end
$upscope $end
$scope begin gen_br4enc[3] $end
$scope module s1_u_br4enc $end
$var wire 3 F" bin [2:0] $end
$var reg 3 G" br4_out [2:0] $end
$upscope $end
$scope module s1_u_br4ppgen $end
$var wire 11 H" a [10:0] $end
$var wire 3 I" br4 [2:0] $end
$var wire 1 J" s $end
$var reg 12 K" o [11:0] $end
$upscope $end
$upscope $end
$scope begin gen_br4enc[4] $end
$scope module s1_u_br4enc $end
$var wire 3 L" bin [2:0] $end
$var reg 3 M" br4_out [2:0] $end
$upscope $end
$scope module s1_u_br4ppgen $end
$var wire 11 N" a [10:0] $end
$var wire 3 O" br4 [2:0] $end
$var wire 1 P" s $end
$var reg 12 Q" o [11:0] $end
$upscope $end
$upscope $end
$scope begin gen_br4enc[5] $end
$scope module s1_u_br4enc $end
$var wire 3 R" bin [2:0] $end
$var reg 3 S" br4_out [2:0] $end
$upscope $end
$scope module s1_u_br4ppgen $end
$var wire 11 T" a [10:0] $end
$var wire 3 U" br4 [2:0] $end
$var wire 1 V" s $end
$var reg 12 W" o [11:0] $end
$upscope $end
$upscope $end
$scope module s1_u_manxchg $end
$var wire 22 X" ia [21:0] $end
$var wire 22 Y" ib [21:0] $end
$var wire 1 U xchg $end
$var wire 22 Z" ob [21:0] $end
$var wire 22 [" oa [21:0] $end
$upscope $end
$scope module s2_u_bsr $end
$var wire 32 \" din [31:0] $end
$var wire 32 ]" dout [31:0] $end
$var wire 1 ^" filler $end
$var wire 5 _" s [4:0] $end
$scope begin gen_brshift[0] $end
$upscope $end
$scope begin gen_brshift[1] $end
$upscope $end
$scope begin gen_brshift[2] $end
$upscope $end
$scope begin gen_brshift[3] $end
$upscope $end
$scope begin gen_brshift[4] $end
$upscope $end
$upscope $end
$scope module s2_u_manxchg $end
$var wire 22 `" ia [21:0] $end
$var wire 22 a" ib [21:0] $end
$var wire 1 : xchg $end
$var wire 22 b" ob [21:0] $end
$var wire 22 c" oa [21:0] $end
$upscope $end
$scope module s3_s4_u_cla $end
$var wire 1 v carry_in $end
$var wire 23 d" in1 [22:0] $end
$var wire 23 e" in2 [22:0] $end
$var wire 23 f" sum [22:0] $end
$var wire 23 g" pro [22:0] $end
$var wire 23 h" gen [22:0] $end
$var wire 24 i" carry_tmp [23:0] $end
$var wire 1 j" carry_out $end
$scope begin carry_generator[0] $end
$upscope $end
$scope begin carry_generator[1] $end
$upscope $end
$scope begin carry_generator[2] $end
$upscope $end
$scope begin carry_generator[3] $end
$upscope $end
$scope begin carry_generator[4] $end
$upscope $end
$scope begin carry_generator[5] $end
$upscope $end
$scope begin carry_generator[6] $end
$upscope $end
$scope begin carry_generator[7] $end
$upscope $end
$scope begin carry_generator[8] $end
$upscope $end
$scope begin carry_generator[9] $end
$upscope $end
$scope begin carry_generator[10] $end
$upscope $end
$scope begin carry_generator[11] $end
$upscope $end
$scope begin carry_generator[12] $end
$upscope $end
$scope begin carry_generator[13] $end
$upscope $end
$scope begin carry_generator[14] $end
$upscope $end
$scope begin carry_generator[15] $end
$upscope $end
$scope begin carry_generator[16] $end
$upscope $end
$scope begin carry_generator[17] $end
$upscope $end
$scope begin carry_generator[18] $end
$upscope $end
$scope begin carry_generator[19] $end
$upscope $end
$scope begin carry_generator[20] $end
$upscope $end
$scope begin carry_generator[21] $end
$upscope $end
$scope begin carry_generator[22] $end
$upscope $end
$scope begin sum_without_carry[0] $end
$upscope $end
$scope begin sum_without_carry[1] $end
$upscope $end
$scope begin sum_without_carry[2] $end
$upscope $end
$scope begin sum_without_carry[3] $end
$upscope $end
$scope begin sum_without_carry[4] $end
$upscope $end
$scope begin sum_without_carry[5] $end
$upscope $end
$scope begin sum_without_carry[6] $end
$upscope $end
$scope begin sum_without_carry[7] $end
$upscope $end
$scope begin sum_without_carry[8] $end
$upscope $end
$scope begin sum_without_carry[9] $end
$upscope $end
$scope begin sum_without_carry[10] $end
$upscope $end
$scope begin sum_without_carry[11] $end
$upscope $end
$scope begin sum_without_carry[12] $end
$upscope $end
$scope begin sum_without_carry[13] $end
$upscope $end
$scope begin sum_without_carry[14] $end
$upscope $end
$scope begin sum_without_carry[15] $end
$upscope $end
$scope begin sum_without_carry[16] $end
$upscope $end
$scope begin sum_without_carry[17] $end
$upscope $end
$scope begin sum_without_carry[18] $end
$upscope $end
$scope begin sum_without_carry[19] $end
$upscope $end
$scope begin sum_without_carry[20] $end
$upscope $end
$scope begin sum_without_carry[21] $end
$upscope $end
$scope begin sum_without_carry[22] $end
$upscope $end
$upscope $end
$scope module s4_u_lzd $end
$var wire 32 k" in [31:0] $end
$var wire 5 l" out [4:0] $end
$scope begin gen_recurse $end
$var wire 16 m" lhs [15:0] $end
$var wire 16 n" rhs [15:0] $end
$var wire 1 o" left_empty $end
$var wire 4 p" half_count [3:0] $end
$scope module inner $end
$var wire 16 q" in [15:0] $end
$var wire 4 r" out [3:0] $end
$scope begin gen_recurse $end
$var wire 8 s" lhs [7:0] $end
$var wire 8 t" rhs [7:0] $end
$var wire 1 u" left_empty $end
$var wire 3 v" half_count [2:0] $end
$scope module inner $end
$var wire 8 w" in [7:0] $end
$var wire 3 x" out [2:0] $end
$scope begin gen_recurse $end
$var wire 4 y" lhs [3:0] $end
$var wire 4 z" rhs [3:0] $end
$var wire 1 {" left_empty $end
$var wire 2 |" half_count [1:0] $end
$scope module inner $end
$var wire 4 }" in [3:0] $end
$var wire 2 ~" out [1:0] $end
$scope begin gen_recurse $end
$var wire 2 !# lhs [1:0] $end
$var wire 2 "# rhs [1:0] $end
$var wire 1 ## left_empty $end
$var wire 1 $# half_count $end
$scope module inner $end
$var wire 2 %# in [1:0] $end
$var wire 1 $# out $end
$scope begin gen_terminal $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module s5_u_bsl $end
$var wire 32 &# din [31:0] $end
$var wire 32 '# dout [31:0] $end
$var wire 1 (# filler $end
$var wire 5 )# s [4:0] $end
$scope begin gen_brshift[0] $end
$upscope $end
$scope begin gen_brshift[1] $end
$upscope $end
$scope begin gen_brshift[2] $end
$upscope $end
$scope begin gen_brshift[3] $end
$upscope $end
$scope begin gen_brshift[4] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#1000
$dumpvars
bx )#
0(#
bx '#
b0xxxxxxxxxxxxxxxxxxxxxxx &#
bx %#
x$#
x##
bx "#
bx !#
bx ~"
bx }"
bx |"
x{"
bx z"
bx y"
bx x"
bx w"
bx v"
xu"
bx t"
bx s"
bx r"
bx q"
bx p"
xo"
bx000000000 n"
bx m"
bx l"
bx000000000 k"
xj"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
0^"
bx ]"
bx0000000000 \"
b101010011010100100100 ["
b10010101111010000001 Z"
b10010101111010000001 Y"
b101010011010100100100 X"
b10100100100 W"
0V"
b1 U"
b10100100100 T"
b1 S"
b10 R"
b10100100100 Q"
0P"
b1 O"
b10100100100 N"
b1 M"
b10 L"
b0 K"
0J"
b0 I"
b10100100100 H"
b0 G"
b0 F"
b0 E"
0D"
b0 C"
b10100100100 B"
b0 A"
b0 @"
b10100100100 ?"
0>"
b1 ="
b10100100100 <"
b1 ;"
b1 :"
b10110110111 9"
18"
b110 7"
b10100100100 6"
b110 5"
b100 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
x,"
bx +"
bx *"
bx )"
bx ("
x'"
x&"
x%"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
xy
bx x
bx w
xv
xu
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
xj
bx i
bx h
xg
b10 f
b1000 e
b10 d
b10100100100 c
b10100000010 b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
b10100100100010100100100000000000000000000000000010100100100010110110111 Y
b1 X
b1001000000001110 W
b101000000100 V
0U
b110 T
b110 S
0R
0Q
b101010011010100100100 P
b10010101111010000001 O
bx N
bx M
bx L
bx K
b0xxxxxxxxxxxxxxxxxxxxxx J
bx I
bx H
xG
xF
bx E
bx D
bx C
bx B
bx000000000 A
bx @
b0xxxxxx ?
bx >
b0 =
x<
x;
x:
19
08
b10010101111010000001 7
b10 6
b101010011010100100100 5
b1000 4
b10010101111010000001 3
b101010011010100100100 2
r0 1
r0 0
r0 /
1.
0-
b11000000100010010101111010000001 ,
0+
b10010000101010011010100100100 *
b1000 )
b101010011010100100100 (
1'
b10 &
b10010101111010000001 %
0$
bx #
bx "
z!
$end
#2000
b10010101111010 K
b10010101111010 b"
b10010101111010 M
b10010101111010 a"
b100101011110100000010000 N
b100101011110100000010000 ]"
b10 H
b11111111101101010000101 I
b101010011010100100100 J
0;
b101010011010100100100 L
b101010011010100100100 c"
0:
b110 _"
b110011011010000 t
b101001001000 s
0G
0F
b10110110111 _
b10100100100 ^
b0 ]
b0 \
b10100100100 [
b10100100100 Z
b10 o
b1000 n
b10 r
0g
b100101011110100000010000000000 \"
b10010101111010000001 q
b101010011010100100100 p
b101010011010100100100 `"
1j
b110 l
b1 i
b10100100100010100100100000000000000000000000000010100100100010110110111 h
b10 m
b1000 k
b0xxxxxxxxxxxxxxxxxxxxxx ~
1-
#3000
0-
#4000
0j"
b110011011111001001000 D
b110011011111001001000 E
b110011011111001001000 f"
b0 h"
b110011011111001001000 g"
b110011011111001001000 C
b0 i"
0v
b110011011010000000000 x
b110011011010000000000 e"
b101001001000 w
b101001001000 d"
0&"
0%"
b110011011010000 #"
b101001001000 ""
1y
b10 {
b1000 z
0u
b11111111101101010000101 $"
b101010011010100100100 ~
b10 }
b1000 |
b10 !"
1-
#5000
0-
#6000
0$#
b11 %#
b10 |"
b10 ~"
1##
b0 !#
b11 "#
b11 }"
b10 v"
b10 x"
0{"
b11 y"
b11 z"
b110011 w"
b10 p"
b10 r"
0u"
b110011 s"
b1111100 t"
b11001101111100 q"
b10 B
b10 l"
0o"
b11001101111100 m"
b1001000000000000 n"
1'"
b10 )"
b1000 ("
b10 +"
b110011011111001001000000000000 A
b110011011111001001000000000000 k"
b110011011111001001000 *"
1-
#7000
0-
#8000
bx000000011001101111100 "
bx000000011001101111100 `
b1100110111110010010000000 @
b1100110111110010010000000 '#
b1010 #
b1010 a
b1010 /"
0<
b1100 >
b1000 ?
b10 3"
b10 )#
1,"
b10 ."
b1000 -"
b10 0"
b110011011111001001000 &#
b110011011111001001000 1"
b10 2"
1-
#9000
0-
#10000
1-
